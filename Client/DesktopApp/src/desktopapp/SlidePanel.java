package desktopapp;

import java.awt.AlphaComposite;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jasmin Rose
 */
public class SlidePanel extends javax.swing.JPanel {
    
    public static final long RUNNING_TIME = 2000;

    private BufferedImage slide1;
    private BufferedImage slide2;
    private BufferedImage slide3;
    private BufferedImage slide4;
    private BufferedImage slide5;
    
    private BufferedImage inImage;
    private BufferedImage outImage;

    private float alpha = 0f;
    private long startTime = -1;
    
    /**
     * Creates new form SlidePanel
     */
    public SlidePanel() {
        initComponents();
        try {
            slide1 = ImageIO.read(new File("src/desktopapp/img/banners/banner1.jpg"));
            slide2 = ImageIO.read(new File("src/desktopapp/img/banners/banner2.jpg"));
            slide3 = ImageIO.read(new File("src/desktopapp/img/banners/banner3.jpg"));
            
            inImage = slide1;
            outImage = slide2;
        } catch (IOException exp) {
            exp.printStackTrace();
        }

        final Timer timer = new Timer(40, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (startTime < 0) {
                    startTime = System.currentTimeMillis();
                } else {

                    long time = System.currentTimeMillis();
                    long duration = time - startTime;
                    if (duration >= RUNNING_TIME) {
                        startTime = -1;
                        ((Timer) e.getSource()).stop();
                        alpha = 0f;
                    } else {
                        alpha = 1f - ((float) duration / (float) RUNNING_TIME);
                    }
                    repaint();
                }
            }
        });
        
        addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                alpha = 0f;
                BufferedImage tmp = inImage;
                inImage = outImage;
                outImage = tmp;
                timer.start();
            }

        });
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(
            Math.max(inImage.getWidth(), outImage.getWidth()), 
            Math.max(inImage.getHeight(), outImage.getHeight()));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setComposite(AlphaComposite.SrcOver.derive(alpha));
        int x = (getWidth() - inImage.getWidth()) / 2;
        int y = (getHeight() - inImage.getHeight()) / 2;
        g2d.drawImage(inImage, x, y, this);

        g2d.setComposite(AlphaComposite.SrcOver.derive(1f - alpha));
        x = (getWidth() - outImage.getWidth()) / 2;
        y = (getHeight() - outImage.getHeight()) / 2;
        g2d.drawImage(outImage, x, y, this);
        g2d.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
